<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon"
          href="~/images/logo.jpeg"
          type="image/svg+xml" />
    <link rel="stylesheet" href="~/css/forgetpass.css" />
    <title>Forgot Password</title>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Forgot Password</h1>
            <p>
                Enter your email address and we'll send you a verification code to
                reset your password.
            </p>
        </div>

        <!-- Error/Success Messages -->
        <div id="message-container" class="message-container"></div>

        <!-- Step 1: Email Form -->
        <form id="reset-form">
            <div class="form-group">
                <label for="email">Email Address</label>
                <input type="email"
                       id="email"
                       placeholder="Enter your email"
                       required />
            </div>

            <div class="button-group">
                <button type="button" class="secondary" onclick="location.href='@Url.Action("signup","Auth")'">
                    Back to Login
                </button>
                <button type="submit" id="send-code-btn">Send Code</button>
            </div>
        </form>

        <!-- Step 2: Success Message -->
        <div class="success-message" id="success-message">
            <div class="icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <h3>Email Sent!</h3>
            <p>
                We've sent a verification code to your email address. Please check
                your inbox and enter the code below.
            </p>
        </div>

        <form id="verification-form" class="verification-form">
            <label for="verification-code">Enter Verification Code</label>
            <div class="verification-code">
                <input type="text"
                       maxlength="1"
                       pattern="[0-9]"
                       inputmode="numeric"
                       required />
                <input type="text"
                       maxlength="1"
                       pattern="[0-9]"
                       inputmode="numeric"
                       required />
                <input type="text"
                       maxlength="1"
                       pattern="[0-9]"
                       inputmode="numeric"
                       required />
                <input type="text"
                       maxlength="1"
                       pattern="[0-9]"
                       inputmode="numeric"
                       required />
                <input type="text"
                       maxlength="1"
                       pattern="[0-9]"
                       inputmode="numeric"
                       required />
                <input type="text"
                       maxlength="1"
                       pattern="[0-9]"
                       inputmode="numeric"
                       required />
            </div>

            <div class="timer" id="timer">
                Code expires in: <span id="countdown">05:00</span>
            </div>

            <div class="timer">
                Didn't receive the code?
                <button type="button" class="resend" id="resend-button" disabled>
                    Resend Code (<span id="resend-countdown">60</span>s)
                </button>
            </div>

            <div class="button-group">
                <button type="button" class="secondary" id="back-to-email">
                    Back
                </button>
                <button type="submit">Verify Code</button>
            </div>
        </form>

        <form id="new-password-form" class="reset-password-form">
            <div class="form-group">
                <label for="new-password">New Password</label>
                <input type="password"
                       id="new-password"
                       placeholder="Enter new password"
                       required />
            </div>

            <div class="form-group">
                <label for="confirm-password">Confirm Password</label>
                <input type="password"
                       id="confirm-password"
                       placeholder="Confirm new password"
                       required />
            </div>

            <div class="button-group">
                <button type="button" class="secondary" id="back-to-verification">
                    Back
                </button>
                <button type="submit">Reset Password</button>
            </div>
        </form>
    </div>

    <script>
        // DOM Elements
        const resetForm = document.getElementById("reset-form");
        const successMessage = document.getElementById("success-message");
        const verificationForm = document.getElementById("verification-form");
        const newPasswordForm = document.getElementById("new-password-form");
        const backToEmailBtn = document.getElementById("back-to-email");
        const backToVerificationBtn = document.getElementById("back-to-verification");
        const resendButton = document.getElementById("resend-button");
        const countdownEl = document.getElementById("countdown");
        const resendCountdownEl = document.getElementById("resend-countdown");
        const messageContainer = document.getElementById("message-container");

        // Store email for use across forms
        let userEmail = "";

        // Show message function
        function showMessage(message, isError = false) {
            messageContainer.innerHTML = `<div class="${isError ? 'error' : 'success'}">${message}</div>`;
            setTimeout(() => {
                messageContainer.innerHTML = '';
            }, 5000);
        }

        // Verification code input handling
        const codeInputs = verificationForm.querySelectorAll("input");
        codeInputs.forEach((input, index) => {
            // Auto-focus next input
            input.addEventListener("input", (e) => {
                if (e.target.value && index < codeInputs.length - 1) {
                    codeInputs[index + 1].focus();
                }
            });

            // Handle backspace
            input.addEventListener("keydown", (e) => {
                if (e.key === "Backspace" && !e.target.value && index > 0) {
                    codeInputs[index - 1].focus();
                }
            });

            // Handle paste
            input.addEventListener("paste", (e) => {
                e.preventDefault();
                const pasteData = e.clipboardData.getData("text").trim();
                if (/^\d+$/.test(pasteData) && pasteData.length <= codeInputs.length) {
                    for (let i = 0; i < pasteData.length; i++) {
                        if (index + i < codeInputs.length) {
                            codeInputs[index + i].value = pasteData[i];
                        }
                    }
                    if (index + pasteData.length < codeInputs.length) {
                        codeInputs[index + pasteData.length].focus();
                    }
                }
            });
        });

        // Step 1: Submit email form
        resetForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            const emailInput = document.getElementById("email");
            userEmail = emailInput.value.trim();

            if (!userEmail) {
                showMessage("Please enter your email address", true);
                return;
            }

            const sendCodeBtn = document.getElementById("send-code-btn");
            sendCodeBtn.disabled = true;
            sendCodeBtn.textContent = "Sending...";

            try {
                const response = await fetch('@Url.Action("SendVerificationCode", "Auth")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `email=${encodeURIComponent(userEmail)}`
                });

                const data = await response.json();

                if (data.success) {
                    // Hide the form
                    resetForm.style.display = "none";

                    // Show success message and verification form
                    successMessage.classList.add("show");
                    setTimeout(() => {
                        verificationForm.classList.add("show");
                        startCountdown();
                        startResendCountdown();
                    }, 1500);
                } else {
                    showMessage(data.message || "Failed to send verification code. Please try again.", true);
                    sendCodeBtn.disabled = false;
                    sendCodeBtn.textContent = "Send Code";
                }
            } catch (error) {
                console.error("Error:", error);
                showMessage("An error occurred. Please try again later.", true);
                sendCodeBtn.disabled = false;
                sendCodeBtn.textContent = "Send Code";
            }
        });

        // Step 2: Submit verification form
        verificationForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            // Get verification code
            let code = "";
            codeInputs.forEach((input) => {
                code += input.value;
            });

            if (code.length !== 6) {
                showMessage("Please enter the complete 6-digit code", true);
                return;
            }

            try {
                const response = await fetch('@Url.Action("VerifyCode", "Auth")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `email=${encodeURIComponent(userEmail)}&code=${encodeURIComponent(code)}`
                });

                const data = await response.json();

                if (data.success) {
                    // Hide verification form
                    verificationForm.classList.remove("show");

                    // Show new password form
                    newPasswordForm.classList.add("show");
                } else {
                    showMessage("Invalid or expired verification code. Please try again.", true);
                }
            } catch (error) {
                console.error("Error:", error);
                showMessage("An error occurred. Please try again later.", true);
            }
        });

        // Step 3: Submit new password form
        newPasswordForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            const newPassword = document.getElementById("new-password").value;
            const confirmPassword = document.getElementById("confirm-password").value;

            // Validate passwords
            if (newPassword !== confirmPassword) {
                showMessage("Passwords do not match!", true);
                return;
            }

            if (newPassword.length < 6) {
                showMessage("Password must be at least 6 characters long", true);
                return;
            }

            try {
                const response = await fetch('@Url.Action("ResetPassword", "Auth")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `email=${encodeURIComponent(userEmail)}&newPassword=${encodeURIComponent(newPassword)}`
                });

                const data = await response.json();

                if (data.success) {
                    showMessage("Password reset successful!");
                    setTimeout(() => {
                        window.location.href = '@Url.Action("Signup", "Auth")';
                    }, 2000);
                } else {
                    showMessage(data.message || "Failed to reset password. Please try again.", true);
                }
            } catch (error) {
                console.error("Error:", error);
                showMessage("An error occurred. Please try again later.", true);
            }
        });

        // Navigation: Back buttons
        backToEmailBtn.addEventListener("click", () => {
            verificationForm.classList.remove("show");
            successMessage.classList.remove("show");
            resetForm.style.display = "block";

            // Reset the send code button
            const sendCodeBtn = document.getElementById("send-code-btn");
            sendCodeBtn.disabled = false;
            sendCodeBtn.textContent = "Send Code";
        });

        backToVerificationBtn.addEventListener("click", () => {
            newPasswordForm.classList.remove("show");
            verificationForm.classList.add("show");
        });

        // Countdown timer for code expiration
        function startCountdown() {
            let minutes = 5;
            let seconds = 0;

            const countdownInterval = setInterval(() => {
                if (seconds === 0) {
                    if (minutes === 0) {
                        clearInterval(countdownInterval);
                        countdownEl.textContent = "00:00";
                        showMessage("Verification code has expired. Please request a new one.", true);
                        return;
                    }
                    minutes--;
                    seconds = 59;
                } else {
                    seconds--;
                }

                countdownEl.textContent = `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
            }, 1000);
        }

        // Countdown for resend button
        function startResendCountdown() {
            let seconds = 60;
            resendButton.disabled = true;

            const resendInterval = setInterval(() => {
                seconds--;
                resendCountdownEl.textContent = seconds;

                if (seconds <= 0) {
                    clearInterval(resendInterval);
                    resendButton.disabled = false;
                    resendButton.textContent = "Resend Code";
                }
            }, 1000);
        }

        // Resend button click handler
        resendButton.addEventListener("click", async () => {
            if (resendButton.disabled) return;

            resendButton.disabled = true;
            resendButton.textContent = "Sending...";

            try {
                const response = await fetch('@Url.Action("SendVerificationCode", "Auth")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `email=${encodeURIComponent(userEmail)}`
                });

                const data = await response.json();

                if (data.success) {
                    showMessage("A new verification code has been sent to your email.");

                    // Reset inputs
                    codeInputs.forEach((input) => {
                        input.value = "";
                    });
                    codeInputs[0].focus();

                    // Restart countdowns
                    startCountdown();
                    startResendCountdown();
                } else {
                    showMessage(data.message || "Failed to send verification code. Please try again.", true);
                    resendButton.disabled = false;
                    resendButton.textContent = "Resend Code";
                }
            } catch (error) {
                console.error("Error:", error);
                showMessage("An error occurred. Please try again later.", true);
                resendButton.disabled = false;
                resendButton.textContent = "Resend Code";
            }
        });
    </script>

    <!-- Add Font Awesome for icons -->
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
</body>
</html>